<?xml version="1.0" ?>
<!-- The Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see...
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="THDL Archive" version="1.1">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       Applications should change this to reflect the nature of the search collection.
       version="1.1" is Solr's version number for the schema syntax and semantics.  It should
       not normally be changed by applications.
       1.0: multiValued attribute did not exist, all fields are multiValued by nature
       1.1: multiValued attribute introduced, false by default -->

  <types>
    <!-- field type definitions. The "name" attribute is
         just a label to be used by field definitions.  The "class"
         attribute and any other attributes determine the real
         behavior of the fieldtype.  -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.  
       - StrField and TextField support an optional compressThreshold which
       limits compression (if enabled in the derived fields) to values which
       exceed a certain size (in characters).
    -->
    <fieldtype name="string" class="solr.StrField" sortMissingLast="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldtype name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as a strings.
       - If sortMissingLast="true" then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true" then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the field
       first in an ascending sort and last in a descending sort.
    -->    

    <!-- numeric field types that store and index the text
         value verbatim (and hence don't support range queries since the
         lexicographic ordering isn't equal to the numeric ordering) -->
    <fieldtype name="integer" class="solr.IntField"/>
    <fieldtype name="long" class="solr.LongField"/>
    <fieldtype name="float" class="solr.FloatField"/>
    <fieldtype name="double" class="solr.DoubleField"/>

    <!-- Numeric field types that manipulate the value into
         a string value that isn't human readable in its internal form,
         but with a lexicographic ordering the same as the numeric ordering
         so that range queries correctly work. -->
    <fieldtype name="sint" class="solr.SortableIntField" sortMissingLast="true"/>
    <fieldtype name="slong" class="solr.SortableLongField" sortMissingLast="true"/>
    <fieldtype name="sfloat" class="solr.SortableFloatField" sortMissingLast="true"/>
    <fieldtype name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true"/>


    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory. -->
    <fieldtype name="date" class="solr.DateField" sortMissingLast="true"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see...
            http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- Standard analyzer commonly used by Lucene developers -->
    <fieldtype name="text_lu" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory"/>
        <filter class="solr.EnglishPorterFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldtype>
    
    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldtype name="textTight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldtype>
    
    <!-- A text field that only splits on whitespace for more exact matching -->
    <fieldtype name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldtype>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
    <fieldtype name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
          <tokenizer class="solr.WhitespaceTokenizerFactory"/>
          <!-- in this example, we will only use synonyms at query time
          <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
          -->
          <filter class="solr.StopFilterFactory" ignoreCase="true"/>
          <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solr.LowerCaseFilterFactory"/>
          <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
          <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
          <tokenizer class="solr.WhitespaceTokenizerFactory"/>
          <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
          <filter class="solr.StopFilterFactory" ignoreCase="true"/>
          <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
          <filter class="solr.LowerCaseFilterFactory"/>
          <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
          <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldtype>
    
    
    <!-- THDL ADDED VALUE -->
    <fieldtype name="text_tibetan" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="org.thdl.lucene.TshegBarTokenizerFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="org.thdl.lucene.TshegBarTokenizerFactory"/>
        </analyzer>
    </fieldtype>
    
    <fieldtype name="text_wylie" class="solr.TextField">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
   <!--     <analyzer class="org.thdl.lucene.WylieTibetanAnalyzer"/> -->
    </fieldtype>
    
    <fieldtype name="text_idlist" class="solr.TextField">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
     <!--   <filter class="org.thdl.lucene.NumberPadderFactory"/>  -->
    </fieldtype>
    
 </types>


 <fields>
   <!-- Valid attributes for fields:
       name: mandatory - the name for the field
       type: mandatory - the name of a previously defined type from the <types> section
       indexed: true if this field should be indexed (searchable)
       stored: true if this field should be retrievable
       compressed: [false] if this field should be stored using gzip compression
                   (this will only apply if the field type is compressable; among
                    the standard field types, only TextField and StrField are)
       multiValued: true if this field may contain multiple values per document
       omitNorms: (expert) set to true to omit the norms associated with this field
                  (this disables length normalization and index-time boosting for the field)
   -->
   
   <!-- THDL ADDED VALUE -->
   
   <!-- transcript documents -->
   <field name="id" type="string" indexed="true" stored="true"/>
   <field name="numericRef" type="string" indexed="true" stored="false"/>
   <field name="form_bo" type="text_tibetan" indexed="true" stored="true"/> 

   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
        will be used if the name matches any of the patterns.
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        Longer patterns will be matched first.  if equal size patterns
        both match, the first appearing in the schema will be used.  -->
   <dynamicField name="*_i"  type="sint"    indexed="true"  stored="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
   <dynamicField name="*_l"  type="slong"   indexed="true"  stored="true"/>
   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
   <dynamicField name="*_f"  type="sfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_d"  type="sdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
   
   
   <!-- THDL ADDED VALUE -->
   
   <!-- suffix for any field containing Tibetan language content -->
   <dynamicField name="*_bo" type="text_tibetan" indexed="true" stored="true"/>
   
   <!-- suffix for any field containing Tibetan transliterated into Wylie -->
   <dynamicField name="*_bo-Latn"  type="text_ws"  indexed="true" stored="true"/>
   
   <!-- suffix for any field containing English language content -->
   <dynamicField name="*_en" type="text_lu" indexed="true" stored="true"/>
   
   <!-- FIXME shouldn't be string!! suffix for any field containing Chinese language content -->
   <dynamicField name="*_zh" type="string" indexed="true" stored="true"/>
   
   <dynamicField name="*_idref" type="string" indexed="true" stored="false"/>
   <dynamicField name="*_idlist" type="text_ws" indexed="true" stored="true"/>
   <dynamicField name="*_lang" type="string" indexed="true" stored="true"/>
   <dynamicField name="*_filename" type="string" indexed="true" stored="true"/>
   
 </fields>

 <!-- field to use to determine and enforce document uniqueness. -->
 <uniqueKey>id</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>form_bo</defaultSearchField>

 <!-- SolrQueryParser configuration:
        defaultOperator="AND|OR"
 -->
 <solrQueryParser defaultOperator="OR"/>


 <!-- Similarity is the scoring routine for each document vs a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.  -->
 <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
 
</schema>

